extend layout

block links
  link(rel='stylesheet', href='/stylesheets/minesweeper.css')

block content
  div.contentBox
    div.heading
      div.minesLeft
        div.digitZero &nbsp;
        div.digitOne &nbsp;
        div.digitZero &nbsp;
      div.face.facesmile &nbsp;
      div.timer
        div.digitZero &nbsp;
        div.digitZero &nbsp;
        div.digitZero &nbsp;
    div.board
      table
  div.btn-group
    button.btn.btn-primary.active.sweep Sweep
    button.btn.btn-primary.flag Flag
  button.btn.btn-primary.hint Hint
  script.
    var digitClasses = ['digitZero', 'digitOne', 'digitTwo', 'digitThree', 'digitFour', 'digitFive', 'digitSix', 'digitSeven', 'digitEight', 'digitNine']
    var game
    var flagging = false
    var state = {
        'unclicked': 'unclicked'
      , '0': 0
      , '1': 1
      , '2': 2
      , '3': 3
      , '4': 4
      , '5': 5
      , '6': 6
      , '7': 7
      , '8': 8
      , '9': 9      
      , 'flagged': 'flagged'
    }

    //init board
    ;(function () {
      for(var r=1; r<=8; r++) {
        var row = $(document.createElement('tr'))
        for(var c=1; c<=8; c++) {
          row.append($(document.createElement('td')).addClass('notclicked').attr('row', ''+r).attr('col', ''+c))
        }
        $('table').append(row)
      }
    })()

    function Game () {
      this.bombs = {}
      this.board = []
      this.gameOver = false
      this.numBombs = 10
      this.numFlagsLeft = this.numBombs
      this.firstClicked = false
      this.time = 0

      updateNumFlagsImages(this.numFlagsLeft)
      updateTimerImages(this.time)
      this.initBombs()
    }

    Game.prototype.initBombs = function () {
      var numBombsLeft = this.numBombs
      var numCellsLeft = 64

      this.board.push(null)

      for(var r=1; r<=8; r++) {
        this.bombs[r] = {}

        var row = [null]

        for(var c=1; c<=8; c++) {
          if(Math.floor(Math.random()*numCellsLeft)<numBombsLeft) {
            numBombsLeft--
            this.bombs[r][c] = true
          } else {
            this.bombs[r][c] = false
          }
          numCellsLeft--
          row.push(state.unclicked)
        }

        this.board.push(row)
      }
    }

    Game.prototype.terminate = function () {
      game.gameOver = true
      stopTimer()
    }

    Game.prototype.lose = function (elem) {
      elem.addClass('bombdead')
      $('.face').attr('class', 'face facedead')

      colorAllBombs()
      this.terminate()
    }

    Game.prototype.win = function () {
      $('.face').attr('class', 'face facewin')

      this.terminate()
    }

    var updateNumFlagsImages = function (numFlagsLeft) {
      var str = String(numFlagsLeft)
      while (str.length<3) str = '0'+str

      $('.minesLeft').find('div').eq(0).attr('class', '').addClass(digitClasses[Number(str[0])])
      $('.minesLeft').find('div').eq(1).attr('class', '').addClass(digitClasses[Number(str[1])])
      $('.minesLeft').find('div').eq(2).attr('class', '').addClass(digitClasses[Number(str[2])])
    }

    var updateTimerImages = function (time) {
      var str = String(time)
      while(str.length<3) str = '0'+str

      $('.timer').find('div').eq(0).attr('class', '').addClass(digitClasses[Number(str[0])])
      $('.timer').find('div').eq(1).attr('class', '').addClass(digitClasses[Number(str[1])])
      $('.timer').find('div').eq(2).attr('class', '').addClass(digitClasses[Number(str[2])])
    }

    var incrementTimerImages = function () {
      game.time++

      updateTimerImages(game.time)
    }

    var stopTimer = function () {
      clearInterval(game.interval)
    }

    var restartGame = function () {
      $('.face').attr('class', 'face facesmile')

      game = new Game()

      $('td').each(function () {
        $(this).attr('class', 'notclicked')
      })
      if(game.interval) clearInterval(game.interval)
    }
    restartGame()

    var judgements = {
        'bomb': 'bomb'
      , 'clear': 'clear'
      , 'unknown': 'unknown'
    }

    var foundAllFlags = function (row, col) {
      if(row<1||col<1||row>8||col>8||game.board[row][col]==state.unclicked||game.board[row][col]==state.flagged) return false

      return (getNumFlaggedNeighbors(row, col)==game.board[row][col])
    }

    var getNumFlaggedNeighbors = function (row, col) {
      var numFlagged = 0
      for(var r=row-1; r<=row+1; r++) {
        for(var c=col-1; c<=col+1; c++) {
          if(r<1||c<1||r>8||c>8) continue

          if(game.board[r][c]==state.flagged) numFlagged++
        }
      }
      return numFlagged
    }

    var getNumUnclickedNeighbors = function (row, col) {
      var numUnclicked = 0
      for(var r=row-1; r<=row+1; r++) {
        for(var c=col-1; c<=col+1; c++) {
          if(r<1||c<1||r>8||c>8) continue

          if(game.board[r][c]==state.unclicked) numUnclicked++
        }
      }
      return numUnclicked
    }

    var mustBeFlag = function (row, col) {
      console.log('mustBeFlag, row: '+row+', col: '+col)
      for(var r=row-1; r<=row+1; r++) {
        for(var c=col-1; c<=col+1; c++) {
          if(r<1||c<1||r>8||c>8||game.board[r][c]==state.unclicked||game.board[r][c]==state.flagged) continue

          console.log('gameBoard['+r+']['+c+']: '+game.board[r][c]+', getNumFlaggedNeighbors: '+getNumFlaggedNeighbors(r, c)+', getNumUnclickedNeighbors: '+getNumUnclickedNeighbors(r, c))
          if(game.board[r][c]-getNumFlaggedNeighbors(r, c)==getNumUnclickedNeighbors(r, c)) return true
        }
      }
      return false
    }

    var getJudgement = function (row, col) {
      if(game.board[row][col]!=state.unclicked) return false

      if(mustBeFlag(row, col)) return judgements.bomb

      for(var r=row-1; r<=row+1; r++) {
        for(var c=col-1; c<=col+1; c++) {
          if(foundAllFlags(r, c)) return judgements.clear
        }
      }
      return judgements.unknown
    }

    var findMove = function () {
      for(var r=1; r<=8; r++) {
        for(var c=1; c<=8; c++) {
          var judgement = getJudgement(r, c)
          if(judgement==judgements.clear) click(null, r, c)
          else if(judgement==judgements.bomb) flag(null, r, c)
        }
      }
    }

    var colorAllBombs = function () {
      for(var r=1; r<=8; r++) {
        for(var c=1; c<=8; c++) {

          var elem = getElem(r, c)

          if(game.board[r][c]==state.flagged) {
            if(!game.bombs[r][c]) elem.removeClass('flagged').addClass('misflagged')
          } else {
            if(game.bombs[r][c]&&!elem.hasClass('bombdead')) elem.addClass('bomb').addClass('clicked').removeClass('notclicked')
          }
        }
      }
    }

    var getNumber = function (row, col) {
      var numNeighbors = 0
      for(var r=row-1; r<=row+1; r++) {
        for(var c=col-1; c<=col+1; c++) {
          if(r>0&&c>0&&r<=8&&c<=8&&(r!=row||c!=col)&&game.bombs[r][c]) numNeighbors++
        }
      }
      return numNeighbors
    }

    var numberToString = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
    var setNumber = function (r, c) {
      if(r<1||r>8||c<1||c>8) return

      var num = getNumber(r, c)

      var elem = getElem(r, c)
      if(game.board[r][c] == state.flagged || game.board[r][c] != state.unclicked) return
      elem.addClass(numberToString[num]).addClass('clicked').removeClass('notclicked')
      game.board[r][c] = num

      if(num==0) {
        setNumber(r-1, c-1)
        setNumber(r-1, c)
        setNumber(r-1, c+1)
        setNumber(r, c-1)
        setNumber(r, c+1)
        setNumber(r+1, c-1)
        setNumber(r+1, c)
        setNumber(r+1, c+1)
      }
    }

    var click = function (elem, r, c) {
      if(elem) {
        r = Number(elem.attr('row'))
        c = Number(elem.attr('col'))
      } else {
        elem = getElem(r, c)
      }

      elem.removeClass('notclicked')

      if(game.bombs[r][c]) {
        game.lose(elem)
      } else {
        setNumber(r, c)
      }
    }

    var isBomb = function (elem) {
      var r = Number(elem.attr('row'))
      var c = Number(elem.attr('col'))

      return game.bombs[r][c]
    }

    var setPiece = function (elem, val) {
      var r = Number(elem.attr('row'))
      var c = Number(elem.attr('col'))

      game.board[r][c] = val
    }

    var getElem = function (r, c) {
      return $('[row="'+r+'"][col="'+c+'"]')
    }
  
    var incorrect = false
    var flag = function (elem, r, c) {
      if(game.numFlagsLeft==0) return

      if(!elem) elem = getElem(r, c)

      game.numFlagsLeft --

      if(!isBomb(elem)) incorrect=true

      if(game.numFlagsLeft==0&&!incorrect) game.win()

      updateNumFlagsImages(game.numFlagsLeft)

      elem.attr('class', 'flagged')
      setPiece(elem, state.flagged)
    }

    var unflag = function (elem) {
      game.numFlagsLeft ++

      elem.removeClass('flagged').addClass('notclicked')

      updateNumFlagsImages(game.numFlagsLeft)

      setPiece(elem, state.unclicked)
    }

    $('.notclicked').mousedown(function (e) {
      if(game.gameOver) return

      if(!game.firstClicked) {
        game.firstClicked = true

        game.interval = window.setInterval(function () {
          incrementTimerImages()
        }, 1000)
      }

      if(e.ctrlKey||flagging) {
        if($(this).hasClass('flagged')) unflag($(this))
        else if($(this).hasClass('notclicked')) flag($(this))

        return
      }

      if(!$(this).hasClass('notclicked')) return
      
      click($(this))
    })

    $('.face').click(function () {
      restartGame()
    })

    $('.sweep').click(function () {
      flagging = false
      $('button').removeClass('active')
      $('.sweep').addClass('active')

    })
    $('.flag').click(function () {
      flagging = true
      $('button').removeClass('active')
      $('.flag').addClass('active')
    })
    $('.hint').click(function () {
      $(this).removeClass('active')
      findMove()
    })