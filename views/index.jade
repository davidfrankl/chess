extend layout

block content
  div.row.gray
    div.col-xs-6
      div.tableContainer
        table#t
        p#opponent
    div.col-xs-6
      div.infobox#black
        h3
          span &#x25A0;
          span.username
          span.hidden.currentPlayerIndicator (Up Now)
        ul
      div.infobox#white
        h3
          span &#x25A0;
          span.username
          span.currentPlayerIndicator (Up Now)
        ul
  div.fadedOverlay
    div#menu
      h1#header Select a Game Type
      #content.clearfix
        p#subtext
        div#gameTypeRadioGroup
          div.radio
            label
              input(type='radio', name='gameType', value='onlinePlay', checked)
              | Online Play (2-player)
          div.radio
            label
              input(type='radio', name='gameType', value='localPlay')
              | Local vs. Local (2-player)
          div.radio
            label
              input(type='radio', name='gameType', value='computerPlay')
              | Local vs. Computer (1-player)
        div#createUsername.hidden
          div.form-group
            label Username
            input.form-control(type='text', name='username', placeholder='username')
        button#button.btn.btn-primary.pull-right(type='button') Next

  script(src="/socket.io/socket.io.js")
  script.
    var socket = io.connect(window.location.origin);

    var pieceType = {
      'king': '\u265A'
    , 'queen': '\u265B'
    , 'rook': '\u265C'
    , 'bishop': '\u265D'
    , 'knight': '\u265E'
    , 'pawn': '\u265F'
    }

    var gameTypes = {
        'local': 'local'
      , 'computer': 'computer'
      , 'global': 'global'
    }

    var gameType = gameTypes.local

    var color = {
        black: 'black'
      , white: 'white'
    }

    var blackUsername, whiteUsername, myUsername

    //number of menu button clicks
    var numClicks = 0

    var table = $('#t')

    //display taken pieces
    var graveyardPieces = {
        black: []
      , white: []
    }


    //init dom board
    ;(function () {
      for(var r=8; r>0; r--) {
        var newRow = $(document.createElement('tr')).attr('class', 'board')
          .append($(document.createElement('td')).attr('class', 'descriptor').append($(document.createTextNode(r))))

        for(var c=0; c<8; c++) {
          newRow.append($(document.createElement('td')).attr('class', 'board'))
        }
        table.append(newRow)
      }

      var newRow = $(document.createElement('tr')).append($(document.createElement('td')))

      //add column letters at the bottom
      for(var c=0, letter='a'; c<8; c++, letter=String.fromCharCode(letter.charCodeAt(0)+1)) {
        newRow.append($(document.createElement('td')).attr('class', 'descriptor').append($(document.createTextNode(letter))))
      }

      table.append(newRow)
    })()


    //takes a rowNumber and colNumber on the chess grid (not in the dom table)
    var updateDomCell = function (r, c, piece) {

      var cell = $('table').find('tr').eq(8-r).find('td').eq(c)
      cell.html('')

      if(piece == null) return

      cell.append($(document.createElement('span')).attr('class', piece.color).append($(document.createTextNode(piece.pieceType))))
    }

    ///////////////////////////////////////////////////////////////////////
    //Game Logic
    function Game (isMaster) {
      this.isMaster = isMaster
      this.board = []
      this.activePlayerColor = color.white

      this.hasMoved = {
        white: {
            leftRook: false
          , rightRook: false
          , king: false
        },
        black: {
            leftRook: false
          , rightRook: false
          , king: false
        }
      }

      this.initBoard()
    }

    Game.prototype.initBoard = function () {
      var row1 = [
        { color: color.white, pieceType: pieceType.rook },
        { color: color.white, pieceType: pieceType.knight },
        { color: color.white, pieceType: pieceType.bishop },
        { color: color.white, pieceType: pieceType.queen },
        { color: color.white, pieceType: pieceType.king },
        { color: color.white, pieceType: pieceType.bishop },
        { color: color.white, pieceType: pieceType.knight },
        { color: color.white, pieceType: pieceType.rook }
      ]
      this.board.push(row1)

      var row2 = []
      for(var c=1; c<=8; c++) {
        row2.push({
            color: color.white
          , pieceType: pieceType.pawn
        })
      }
      this.board.push(row2)

      for(var r=3; r<=6; r++) {
        var rowR = []
        for(var c=1; c<=8; c++) {
          rowR.push(null)
        }
        this.board.push(rowR)
      }

      var row7 = []
      for(var c=1; c<=8; c++) {
        row7.push({
            color: color.black
          , pieceType: pieceType.pawn
        })
      }
      this.board.push(row7)

      var row8 = [
        { color: color.black, pieceType: pieceType.rook },
        { color: color.black, pieceType: pieceType.knight },
        { color: color.black, pieceType: pieceType.bishop },
        { color: color.black, pieceType: pieceType.queen },
        { color: color.black, pieceType: pieceType.king },
        { color: color.black, pieceType: pieceType.bishop },
        { color: color.black, pieceType: pieceType.knight },
        { color: color.black, pieceType: pieceType.rook }
      ]
      this.board.push(row8)

      if(this.isMaster) {
        for(var r=1; r<=2; r++) {
          for(var c=1; c<=8; c++) {
            updateDomCell(r, c, this.getPiece(r,c))
          }
        }
        for(var r=7; r<=8; r++) {
          for(var c=1; c<=8; c++) {
            updateDomCell(r, c, this.getPiece(r,c))
          }
        }
      }
    }


    Game.prototype.getPiece = function (loc, col) {
      if (arguments.length == 1) return this.board[loc.row-1][loc.col-1]
      else return this.board[loc-1][col-1]
    }

    Game.prototype.setPiece = function (loc, piece) {
      if(this.isMaster && piece!=null && this.getPiece(loc)!=null) addToGraveyard(this.getPiece(loc))

      this.board[loc.row-1][loc.col-1] = piece

      if(piece!=null && (loc.row==1||loc.row==8)&&piece.pieceType == pieceType.pawn) piece.pieceType = pieceType.queen

      if(this.isMaster) updateDomCell(loc.row, loc.col, piece)
    }

    Game.prototype.validMove = function (oldLoc, newLoc) {
      var myPiece = this.getPiece(oldLoc)

      if(!myPiece) return false

      //players can't move other players piece
      if(myPiece.color!=this.activePlayerColor) return false

      //players can't capture their own piece
      if(this.getPiece(newLoc)!=null && this.getPiece(newLoc).color == myPiece.color) return false

      var obj = this
      //boolean function for rooks and queens moving horizontally
      var unobstructedHorizontally = function () {
        var increment = oldLoc.col < newLoc.col? 1: -1
        for(var c=oldLoc.col+increment; c!=newLoc.col; c+=increment) {
          if(obj.getPiece({row: oldLoc.row, col: c})!=null) return false
        }
        return true
      }
      var unobstructedVertically = function () {
        var increment = oldLoc.row < newLoc.row? 1: -1
        for(var r=oldLoc.row+increment; r!=newLoc.row; r+=increment) {
          if(obj.getPiece({row: r, col: oldLoc.col})!=null) return false
        }
        return true
      }
      var unobstructedDiagonally = function () {
        var horizontalIncrement = oldLoc.col < newLoc.col? 1: -1
        var verticalIncrement = oldLoc.row < newLoc.row? 1: -1

        for(var r=oldLoc.row+verticalIncrement, c=oldLoc.col+horizontalIncrement; r!=newLoc.row; r+=verticalIncrement, c+=horizontalIncrement) {
          if(obj.getPiece({row: r, col: c})!=null) {
            return false
          }
        }
        return true
      }
      var kingUnobstructedLeft = function () {
        for(var c=4; c>1; c--) {
          if(obj.getPiece(newLoc.row, c)) return false
        }
        return true
      }
      var kingUnobstructedRight = function () {
        for(var c=6; c<8; c++) {
          if(obj.getPiece(newLoc.row, c)) {
            return false
          }
        }
        return true
      }

      if(myPiece.pieceType == pieceType.pawn) {
        var increment = myPiece.color == 'white' ? 1 : -1

        if(oldLoc.col == newLoc.col) {
          if(this.getPiece(newLoc)!=null) return false

          var distance = newLoc.row-oldLoc.row
          if(distance==increment) return true
          if(distance==increment*2&&((oldLoc.row==2&&myPiece.color == 'white')||(oldLoc.row==7&&myPiece.color == 'black'))&&unobstructedVertically()) return true

          return false
        } else {
          if(this.getPiece(newLoc) == null) return false
          if(this.getPiece(newLoc).color == myPiece.color) return false
          if(Math.abs(newLoc.col-oldLoc.col)>1) return false
          if(newLoc.row-oldLoc.row!=increment) return false

          return true
        }
      }

      if (myPiece.pieceType == pieceType.rook) {
        if (oldLoc.row==newLoc.row) return unobstructedHorizontally()
        if (oldLoc.col==newLoc.col) return unobstructedVertically()
        return false
      }

      if (myPiece.pieceType == pieceType.knight) {
        if(Math.abs(oldLoc.row-newLoc.row)==2 && Math.abs(oldLoc.col-newLoc.col)==1) return true
        if (Math.abs(oldLoc.row-newLoc.row)==1 && Math.abs(oldLoc.col-newLoc.col)==2) return true
        return false
      }

      if (myPiece.pieceType == pieceType.bishop) {
        if (Math.abs(oldLoc.row-newLoc.row) == Math.abs(oldLoc.col-newLoc.col)) return unobstructedDiagonally()
        return false        
      }

      if (myPiece.pieceType == pieceType.queen) {
        if (oldLoc.row==newLoc.row) return unobstructedHorizontally()
        if (oldLoc.col==newLoc.col) return unobstructedVertically()

        if (Math.abs(oldLoc.row-newLoc.row) == Math.abs(oldLoc.col-newLoc.col)) return unobstructedDiagonally()

        return false
      }

      if (myPiece.pieceType == pieceType.king) {
        //only move 1 in either direction
        if (Math.abs(oldLoc.row-newLoc.row)<2 && Math.abs(oldLoc.col-newLoc.col)<2) return true

        //not a castle
        if(oldLoc.row!=newLoc.row) return false

        //if the king already moved, cant castle
        if(this.hasMoved[myPiece.color]['king']) return false

        if(oldLoc.col-newLoc.col==2&&kingUnobstructedLeft()&&!this.hasMoved[myPiece.color]['leftRook']) {
          this.hasMoved[myPiece.color]['leftRook'] = true
          this.hasMoved[myPiece.color]['king'] = true
          this.castleRook(newLoc)
          return true
        }        

        if(oldLoc.col-newLoc.col==-2&&kingUnobstructedRight()&&!this.hasMoved[myPiece.color]['rightRook']) {
          this.hasMoved[myPiece.color]['rightRook'] = true
          this.hasMoved[myPiece.color]['king'] = true
          this.castleRook(newLoc)
          return true
        }

        return false
      }

      return true
    }

    Game.prototype.move = function (oldLoc, newLoc) {
      if(!this.validMove(oldLoc, newLoc)) return
      var oldPiece = this.getPiece(oldLoc)
      this.setPiece(newLoc, oldPiece)
      this.setPiece(oldLoc, null)

      this.changeActivePlayer()
    }

    Game.prototype.castleRook = function (kingLoc) {
      var row = kingLoc.row
      var oldCol = kingLoc.col > 5? 8 : 1
      var newCol = kingLoc.col > 5? kingLoc.col-1 : kingLoc.col+1
      this.move({ row: row, col: oldCol }, { row: row, col: newCol })
      this.changeActivePlayer()
    }

    Game.prototype.changeActivePlayer = function () {
      this.activePlayerColor = this.activePlayerColor==color.white? color.black : color.white 

      $('.currentPlayerIndicator').addClass('hidden')
      var elem =  this.activePlayerColor==color.white? $('#white') : $('#black')

      elem.find('.currentPlayerIndicator').removeClass('hidden')
    }

    var game = new Game(true)

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //DOM stuff

    //selected piece must set row first, then col, or compare wont work
    var selectedLocation = null

    var sortGraveyardPieces = function (color) {
      graveyardPieces[color].sort(function (a, b) {
        var pieces = Object.keys(pieceType).map(function (p) { return pieceType[p] })
        return pieces.indexOf(a.pieceType) - pieces.indexOf(b.pieceType)
      })
    }
    var displayGraveyardPieces = function (pieceColor) {
      var infobox = pieceColor==color.black? $('#black') : $('#white')

      infobox.find('ul').html('')

      graveyardPieces[pieceColor].forEach(function (piece) {
        infobox.find('ul').append(
          $(document.createElement('li')).append(
            $(document.createElement('span')).attr('class', piece.color).append(
              $(document.createTextNode(piece.pieceType)))))
      })
    }
    var addToGraveyard = function (piece) {
      var infobox = piece.color==color.black? $('#black') : $('#white')

      graveyardPieces[piece.color].push(piece)
      sortGraveyardPieces(piece.color)

      displayGraveyardPieces(piece.color)
    }

    //init menu
    var updateMenu = function (numClicks) {
      switch (numClicks) {
        case 1:
          if($('[name="gameType"]:checked').attr('value')=='localPlay') {
            $('.fadedOverlay').hide()
            startGame({
                blackUsername: 'Player 2'
              , whiteUsername: 'Player 1'
            })
            return
          }
          if($('[name="gameType"]:checked').attr('value')=='computerPlay') {
            $('.fadedOverlay').hide()
            startGame({
                blackUsername: 'Computer'
              , whiteUsername: 'Player 1'
            })
            gameType = gameTypes.computer
            return
          }
         
          gameType = gameTypes.global
          $('#gameTypeRadioGroup').hide()
          $('#createUsername').removeClass('hidden').find('input').focus()
          $('#header').text('Choose a username:')
          $('#button').attr('disabled', '')
          break
        case 2:
          $('#header').text('Finding an Opponent:')
          $('#subtext').text('searching...')
          $('#createUsername').hide()
          $('#button').hide()
      }
    }

    $('input').keyup(function () {
      if($(this).val().length>0) $('#button').removeAttr('disabled')
      else $('#button').attr('disabled', '')
    })

    $('#button').click(function () {
      numClicks++
      switch (numClicks) {
        case 2:
          myUsername = $('#createUsername').find('input').first().val()
          socket.emit('createUsernameRequestOpponent', {
            username: myUsername
          })
      }
      $(this).trigger('blur')
      updateMenu(numClicks)
    })

    $(document).keypress(function(e) {
      if(e.which == 13) {
        if(!$('#button').attr('disabled')) $('#button').click()
      }
    });

    var startGame = function (data) {
      blackUsername = data.blackUsername
      whiteUsername = data.whiteUsername

      $('#black h3 .username').text(blackUsername)
      $('#white h3 .username').text(whiteUsername)
    }

    socket.on('startGame', function (data) {
      if(!(data.blackUsername==myUsername||data.whiteUsername==myUsername)) return
      startGame(data)
      $('.fadedOverlay').hide()
    })

    var getBoardLocation = function(jQueryElem) {
      return {
          row: 8-jQueryElem.parent().index()
        , col: jQueryElem.index()
      }
    }

    var sameLocation = function (loc1, loc2) {
      return JSON.stringify(loc1)==JSON.stringify(loc2)
    }

    $('td.board').click(function () {
      if(gameType==gameTypes.global) {
        if(game.activePlayerColor==color.black&&whiteUsername==myUsername) return
        if(game.activePlayerColor==color.white&&blackUsername==myUsername) return
      }

      $('.clicked').removeClass('clicked')

      var thisLocation = getBoardLocation($(this))

      //if there is no previously select location, select this one
      if(selectedLocation == null) {
        if(!$(this).find('.black, .white').length) return
        if(game.getPiece(thisLocation).color!=game.activePlayerColor) return

        selectedLocation = thisLocation
        $(this).addClass('clicked')
        return
      }

      var oldLoc = selectedLocation
      selectedLocation = null

      //if player clicked previously selected location, just return
      if(sameLocation(oldLoc, thisLocation)) return

      //otherwise, move the selected piece to the new location
      if(gameType==gameTypes.global) {
        socket.emit('newMove', {
            oldLoc: oldLoc
          , newLoc: thisLocation
        })
      }
      game.move(oldLoc, thisLocation)     

      if(gameType==gameTypes.computer) setTimeout(takeComputerTurn, 0)
    })

    socket.on('newMove', function (data) {
      game.move(data.oldLoc, data.newLoc)
    })

    /////////////////////////////////////////////////////////////////////////////////////////////
    //Computer AI Logic
    var takeComputerTurn = function () {
      var oldLoc = {}
        , newLoc = {}

      findBestTurn(oldLoc, newLoc, 2, game)

      game.move(oldLoc, newLoc)
    }

    var findBestTurn = function (oldLoc, newLoc, plies, game) {
      console.log('findBestTurn '+plies)
      var options = getAllMovesAndScores(plies, game)

      var bestScore = Number.NEGATIVE_INFINITY
      var best = []
      options.forEach(function (option) {
        if(option.score < bestScore) return
        if(option.score == bestScore) best.push(option)
        bestScore = option.score
        best = [option]
      })
      best = best[Math.floor(Math.random()*best.length)]

      oldLoc.row = best.oldLoc.row
      oldLoc.col = best.oldLoc.col

      newLoc.row = best.newLoc.row
      newLoc.col = best.newLoc.col

      return bestScore
    }

    var getAllMovesAndScores = function (plies, game) {
      var validMoves = []
      for(var r=1; r<=8; r++) {
        for(var c=1; c<=8; c++) {
          var oldLoc = { row: r, col: c}

          for(var newR=1; newR<=8; newR++) {
            for(var newC=1; newC<=8; newC++) {
              if(newR==r&&newC==c) continue

              var newLoc = { row: newR, col: newC }

              if(!game.validMove(oldLoc, newLoc)) continue

              validMoves.push({
                  oldLoc: oldLoc
                , newLoc: newLoc
                , score: getScore(plies, game, oldLoc, newLoc)
              })
            }
          }
        }
      }
      return validMoves
    }

    var pieceValues = {
        '\u265A': Number.POSITIVE_INFINITY
      , '\u265B': 9
      , '\u265C': 5
      , '\u265D': 3
      , '\u265E': 3
      , '\u265F': 1
    }

    var getScore = function (plies, game, oldLoc, newLoc) {
      var newGame = jQuery.extend(true, {}, game);
      newGame.isMaster = false
      newGame.move(oldLoc, newLoc)


      var piece = game.getPiece(newLoc)
      var score
      if(!piece) score = 1/2-1/8*Math.abs(4.5-newLoc.col) + 1/2-1/8*Math.abs(4.5-newLoc.row)
      else score = pieceValues[piece.pieceType]

      if(plies==1) return score
      else return score - findBestTurn({}, {}, plies-1, newGame)
    }











